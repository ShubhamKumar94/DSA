public class Solution {
    public static int recursionFun(int[] prices, int n, int ind,int sellFlag, int[][]dpArray){

        if(ind>=n){
            return 0;
        }


        if(dpArray[ind][sellFlag]!=-1){
            return dpArray[ind][sellFlag];
        }

        if(sellFlag==0){
            return dpArray[ind][sellFlag] = Math.max(-prices[ind] + recursionFun(prices,n,ind+1,1,dpArray),recursionFun(prices,n,ind+1,0,dpArray));
        }
        else{
            return dpArray[ind][sellFlag] = Math.max(+prices[ind] + recursionFun(prices,n,ind+2,0,dpArray),recursionFun(prices,n,ind+1,1,dpArray)); 
        }
    }
    public static int stockProfit(int[] prices) {
        
        int n = prices.length;

        int [][] dpArray = new int[n][2];
        
    //     for(int i =0;i<n;i++){
    //         dpArray[i][0] = -1;
    //         dpArray[i][1] = -1;
    //     } 

    //   return  recursionFun(prices,n,0,0,dpArray);

        dpArray[n-1][1] = prices[n-1];

        dpArray[n-2][0] = Math.max(prices[n-1] - prices[n-2],0);

        dpArray[n-2][1] = Math.max(prices[n-2],prices[n-1]); 

        for(int i = n-3;i>=0;i--){

            for(int j =0;j<2;j++){

                if(j==0){
                     dpArray[i][j] = Math.max(-prices[i] + dpArray[i+1][1],dpArray[i+1][0]);
                }
                else{
                    dpArray[i][j] = Math.max(+prices[i] + dpArray[i+2][0],dpArray[i+1][1]);
                }       
            }
        }

        return dpArray[0][0];

    }
}
