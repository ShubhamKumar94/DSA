public class Solution {
    public static int maximumProfit(int[] prices, int n, int fee) {
        // int n = prices.length;

        int [][] dpArray = new int[n+1][2];
        
    //     for(int i =0;i<n;i++){
    //         dpArray[i][0] = -1;
    //         dpArray[i][1] = -1;
    //     } 

    //   return  recursionFun(prices,n,0,0,dpArray);

        // dpArray[n-1][1] = prices[n-1];

        // dpArray[n-2][0] = Math.max(prices[n-1] - prices[n-2],0);

        // dpArray[n-2][1] = Math.max(prices[n-2],prices[n-1]); 

        for(int i = n-1;i>=0;i--){

            
                int j  =0;
                
                dpArray[i][j] = Math.max(-prices[i] + dpArray[i+1][1],dpArray[i+1][0]);
                
                j = 1;
                
                dpArray[i][j] = Math.max((+prices[i]-fee) + dpArray[i+1][0],dpArray[i+1][1]);
                       
    
        }

        return dpArray[0][0];
    }
}
