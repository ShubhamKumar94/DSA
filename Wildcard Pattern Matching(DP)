#have a eye

public class Solution {
	public static int recursionFun(String pattern, String text, int i, int j,int [][] dpArray){

		if(i<=0 || j<=0){
			if(i<=0 && j<=0){
				return 1;
			}
			if(j<=0){

				for(int k =i;k>0;k--){

					if(pattern.charAt(k-1)!='*'){
						return 0;
					}
				}
				return 1;
			}
			return 0;
		}

		if(dpArray[i][j]!=-1){
			return dpArray[i][j];
		}
		if(pattern.charAt(i-1)=='*'){

			return dpArray[i][j] = recursionFun(pattern,text,i-1,j,dpArray) | recursionFun(pattern,text,i,j-1,dpArray);
			// for(int l = j;l>=-1;l--){

			// 	if(recursionFun(pattern,text,i-1,l)){
			// 		return true;
			// 	}
			// }
			// return false;
		}
		if(pattern.charAt(i-1)=='?' || (pattern.charAt(i-1)==text.charAt(j-1))){
			return dpArray[i][j] = recursionFun(pattern,text,i-1,j-1,dpArray);
		}
		
		else if(pattern.charAt(i-1)!=text.charAt(j-1)){
			return dpArray[i][j] = 0;
		}
		return dpArray[i][j] = 1;
	}
	public static boolean wildcardMatching(String pattern, String text) {
		
		int n = pattern.length();

		int m = text.length();

		// int [][] dpArray = new int[n+1][m+1];

		// for(int i =0;i<=n;i++){
		// 	for(int j = 0;j<=m;j++){
		// 		dpArray[i][j] = -1;
		// 	}
		// }
		// int returnValue = recursionFun(pattern,text,n,m,dpArray);

		// if(returnValue==0){
		// 	return false;
		// }
		// return true;

		int [] prev = new int [m+1];

		prev[0] = 1;

		for(int i =1;i<=n;i++){
			int [] current = new int[m+1];
			
			if(pattern.charAt(i-1)=='*'){
				current[0] = prev[0];
			}
			else{
				current[0] = 0;
			}
			for(int j =1;j<=m;j++){

				if(pattern.charAt(i-1)=='*'){

					current[j] = prev[j] | current[j-1];
					// for(int l = j;l>=-1;l--){

					// 	if(recursionFun(pattern,text,i-1,l)){
					// 		return true;
					// 	}
					// }
					// return false;
				}
				else if(pattern.charAt(i-1)=='?' || (pattern.charAt(i-1)==text.charAt(j-1))){
					 current[j] = prev[j-1];
				}
				
				else if(pattern.charAt(i-1)!=text.charAt(j-1)){
					current[j] = 0;
				}
			}
			prev = current;
		}

		if(prev[m]==0){
			return false;
		}
		return true;
	}
}
